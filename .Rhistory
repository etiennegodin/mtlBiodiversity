#print(ids_to_remove)
}
}
}
#print(ids_to_remove)
}
for (u in users)
{
print(u)
df_temp <- filter(df, identifiedBy == u)
ids <-db_scan_func(df_temp)
}
print(length(ids_to_remove))
db_scan_func <- function(df)
{
coords <- df[, c('decimalLongitude', 'decimalLatitude')]
df_sf <- st_as_sf(df, coords = c("decimalLongitude", "decimalLatitude"), crs = 4326)
df_utm <- st_transform(df_sf, 32618)  # pick your UTM zone
coords_utm <- st_coordinates(df_utm)
db <- dbscan(coords_utm, eps = 50, minPts = 2)
#db_h <- hdbscan(coords_utm, minPts = 5)
df$cluster <- db$cluster
clusters <- cluster_stats(df, coords_utm)
#print(clusters)
if (length(clusters) > 0 )
{
print(paste(length(clusters),'Clusters flagged'))
for (i in 1:nrow(df))
{
if (df$cluster[i] %in% clusters){
ids_to_remove <- c(ids_to_remove, df$gbifID[i])
#print(ids_to_remove)
}
}
}
print(length(ids_to_remove))
}
for (u in users)
{
print(u)
df_temp <- filter(df, identifiedBy == u)
ids <-db_scan_func(df_temp)
}
print(length(ids_to_remove))
db_scan_func <- function(df)
{
coords <- df[, c('decimalLongitude', 'decimalLatitude')]
df_sf <- st_as_sf(df, coords = c("decimalLongitude", "decimalLatitude"), crs = 4326)
df_utm <- st_transform(df_sf, 32618)  # pick your UTM zone
coords_utm <- st_coordinates(df_utm)
db <- dbscan(coords_utm, eps = 50, minPts = 2)
#db_h <- hdbscan(coords_utm, minPts = 5)
df$cluster <- db$cluster
clusters <- cluster_stats(df, coords_utm)
#print(clusters)
if (length(clusters) > 0 )
{
print(paste(length(clusters),'Clusters flagged'))
for (i in 1:nrow(df))
{
if (df$cluster[i] %in% clusters){
ids_to_remove <<- c(ids_to_remove, df$gbifID[i])
#print(ids_to_remove)
}
}
}
print(length(ids_to_remove))
}
for (u in users)
{
print(u)
df_temp <- filter(df, identifiedBy == u)
ids <-db_scan_func(df_temp)
}
print(length(ids_to_remove))
db_scan_func <- function(df)
{
coords <- df[, c('decimalLongitude', 'decimalLatitude')]
df_sf <- st_as_sf(df, coords = c("decimalLongitude", "decimalLatitude"), crs = 4326)
df_utm <- st_transform(df_sf, 32618)  # pick your UTM zone
coords_utm <- st_coordinates(df_utm)
db <- dbscan(coords_utm, eps = 50, minPts = 2)
#db_h <- hdbscan(coords_utm, minPts = 5)
df$cluster <- db$cluster
clusters <- cluster_stats(df, coords_utm)
#print(clusters)
if (length(clusters) > 0 )
{
print(paste(length(clusters),'Clusters flagged'))
for (i in 1:nrow(df))
{
if (df$cluster[i] %in% clusters){
ids_to_remove <<- c(ids_to_remove, df$gbifID[i])
#print(ids_to_remove)
}
}
}
#print(length(ids_to_remove))
}
for (u in users)
{
print(u)
df_temp <- filter(df, identifiedBy == u)
ids <-db_scan_func(df_temp)
}
print(length(ids_to_remove))
# Initialize empty vector to store ids
ids_to_remove <- c()
for (u in users)
{
print(u)
df_temp <- filter(df, identifiedBy == u)
ids <-db_scan_func(df_temp)
}
print(length(ids_to_remove))
db_scan_func <- function(df)
{
coords <- df[, c('decimalLongitude', 'decimalLatitude')]
df_sf <- st_as_sf(df, coords = c("decimalLongitude", "decimalLatitude"), crs = 4326)
df_utm <- st_transform(df_sf, 32618)  # pick your UTM zone
coords_utm <- st_coordinates(df_utm)
db <- dbscan(coords_utm, eps = 50, minPts = 2)
#db_h <- hdbscan(coords_utm, minPts = 5)
df$cluster <- db$cluster
clusters <- cluster_stats(df, coords_utm)
#print(clusters)
if (length(clusters) > 0 )
{
print(paste(length(clusters),' \t Clusters flagged'))
for (i in 1:nrow(df))
{
if (df$cluster[i] %in% clusters){
ids_to_remove <<- c(ids_to_remove, df$gbifID[i])
#print(ids_to_remove)
}
}
}
#print(length(ids_to_remove))
}
# Initialize empty vector to store ids
ids_to_remove <- c()
for (u in users)
{
print(u)
df_temp <- filter(df, identifiedBy == u)
ids <-db_scan_func(df_temp)
}
print(length(ids_to_remove))
# Initialize empty vector to store ids
ids_to_remove <- c()
for (u in users)
{
print(u)
df_temp <- filter(df, identifiedBy == u)
ids <-db_scan_func(df_temp)
}
print(length(ids_to_remove))
View(ids_to_remove)
saveRDS(ids_to_remove, "ids_samplingBias.rds")
db_scan_func <- function(df)
{
coords <- df[, c('decimalLongitude', 'decimalLatitude')]
df_sf <- st_as_sf(df, coords = c("decimalLongitude", "decimalLatitude"), crs = 4326)
df_utm <- st_transform(df_sf, 32618)  # pick your UTM zone
coords_utm <- st_coordinates(df_utm)
db <- dbscan(coords_utm, eps = 30, minPts = 2)
#db_h <- hdbscan(coords_utm, minPts = 5)
df$cluster <- db$cluster
clusters <- cluster_stats(df, coords_utm)
#print(clusters)
if (length(clusters) > 0 )
{
print(paste(length(clusters),'Clusters flagged'))
for (i in 1:nrow(df))
{
if (df$cluster[i] %in% clusters){
ids_to_remove <<- c(ids_to_remove, df$gbifID[i])
#print(ids_to_remove)
}
}
}
#print(length(ids_to_remove))
}
# Initialize empty vector to store ids
ids_to_remove <- c()
for (u in users)
{
print(u)
df_temp <- filter(df, identifiedBy == u)
db_scan_func(df_temp)
}
print(length(ids_to_remove))
saveRDS(ids_to_remove, "ids_samplingBias.rds")
db_scan_func <- function(df)
{
coords <- df[, c('decimalLongitude', 'decimalLatitude')]
df_sf <- st_as_sf(df, coords = c("decimalLongitude", "decimalLatitude"), crs = 4326)
df_utm <- st_transform(df_sf, 32618)  # pick your UTM zone
coords_utm <- st_coordinates(df_utm)
db <- dbscan(coords_utm, eps = 50, minPts = 2)
#db_h <- hdbscan(coords_utm, minPts = 5)
df$cluster <- db$cluster
clusters <- cluster_stats(df, coords_utm)
#print(clusters)
if (length(clusters) > 0 )
{
print(paste(length(clusters),'Clusters flagged'))
for (i in 1:nrow(df))
{
if (df$cluster[i] %in% clusters){
ids_to_remove <<- c(ids_to_remove, df$gbifID[i])
#print(ids_to_remove)
}
}
}
#print(length(ids_to_remove))
}
# Initialize empty vector to store ids
ids_to_remove <- c()
for (u in users)
{
print(u)
df_temp <- filter(df, identifiedBy == u)
db_scan_func(df_temp)
}
print(length(ids_to_remove))
saveRDS(ids_to_remove, "ids_samplingBias.rds")
saveRDS(ids_to_remove, "R/ids_samplingBias.rds")
library(tidyverse)
library(DBI)
library(duckdb)
library(arrow)
library(sf) ## for geom
con <- dbConnect(duckdb::duckdb(), dbdir = "C:/Users/manat/Documents/Projects/mtlBiodiversity/data/db/mtlbio.duckdb", read_only = TRUE)
dbListTables(con)
df <- dbReadTable(con, "grid_sjoin")   # read into R
df <- df %>%
filter(!is.na(grid_id))
print(nrow(df))
#Remove ids from user sampling bias filter
loaded_ids <- readRDS("Data/ids_samplingBias.rds")
df <- df %>%
filter(!is.na(grid_id))
print(length(loaded_ids))
loaded_ids <- readRDS("R/ids_samplingBias.rds")
print(length(loaded_ids))
print(length(loaded_ids))
df <- df %>%
filter(gbifID %in% loaded_ids)
#Remove ids from user sampling bias filter
loaded_ids <- readRDS("R/ids_samplingBias.rds")
print(length(loaded_ids))
df <- df %>%
filter(gbifID %in% loaded_ids)
print(length(loaded_ids))
print(length(ids_to_remove))
ids_to_remove <- c()
#Remove ids from user sampling bias filter
loaded_ids <- readRDS("R/ids_samplingBias.rds")
print(length(loaded_ids))
df <- df[df$id %in% loaded_ids, ]
df <- df %>%
filter(!is.na(grid_id))
library(tidyverse)
library(dplyr)
library(DBI)
library(duckdb)
library(arrow)
library(sf) ## for geom
con <- dbConnect(duckdb::duckdb(), dbdir = "C:/Users/manat/Documents/Projects/mtlBiodiversity/data/db/mtlbio.duckdb", read_only = TRUE)
dbListTables(con)
df <- dbReadTable(con, "grid_sjoin")   # read into R
df <- df %>%
filter(!is.na(grid_id))
print(nrow(df))
#Remove ids from user sampling bias filter
loaded_ids <- readRDS("R/ids_samplingBias.rds")
print(length(loaded_ids))
df <- df[df$gbifID %in% loaded_ids, ]
print(paste(nrow(df), "After filter"))
df <- df %>%
filter(!is.na(grid_id))
print(nrow(df))
#Remove ids from user sampling bias filter
loaded_ids <- readRDS("R/ids_samplingBias.rds")
print(length(loaded_ids))
df <- df[!df$gbifID %in% loaded_ids, ]
print(paste(nrow(df), "After filter"))
con <- dbConnect(duckdb::duckdb(), dbdir = "C:/Users/manat/Documents/Projects/mtlBiodiversity/data/db/mtlbio.duckdb", read_only = TRUE)
dbListTables(con)
df <- dbReadTable(con, "grid_sjoin")   # read into R
df <- df %>%
filter(!is.na(grid_id))
print(nrow(df))
#Remove ids from user sampling bias filter
loaded_ids <- readRDS("R/ids_samplingBias.rds")
print(length(loaded_ids))
df <- df[!df$gbifID %in% loaded_ids, ]
print(paste(nrow(df), "After filter"))
library(tidyverse)
library(dplyr)
library(DBI)
library(duckdb)
library(arrow)
library(sf) ## for geom
con <- dbConnect(duckdb::duckdb(), dbdir = "C:/Users/manat/Documents/Projects/mtlBiodiversity/data/db/mtlbio.duckdb", read_only = TRUE)
dbListTables(con)
df <- dbReadTable(con, "grid_sjoin")   # read into R
df <- df %>%
filter(!is.na(grid_id))
print(nrow(df))
#Remove ids from user sampling bias filter
loaded_ids <- readRDS("R/ids_samplingBias.rds")
print(length(loaded_ids))
filtered_df <- df[!df$gbifID %in% loaded_ids, ]
print(paste(nrow(filtered_df), "After filter"))
print(paste(nrow(filtered_df - nrow(df), "After filter"))
print(paste((nrow(filtered_df - nrow(filtered_df)), "After filter"))
print(nrow(filtered_df) - nrow(filtered_df))
con <- dbConnect(duckdb::duckdb(), dbdir = "C:/Users/manat/Documents/Projects/mtlBiodiversity/data/db/mtlbio.duckdb", read_only = TRUE)
dbListTables(con)
df <- dbReadTable(con, "grid_sjoin")   # read into R
df <- df %>%
filter(!is.na(grid_id))
print(nrow(df))
#Remove ids from user sampling bias filter
loaded_ids <- readRDS("R/ids_samplingBias.rds")
print(length(loaded_ids))
filtered_df <- df[!df$gbifID %in% loaded_ids, ]
print(nrow(filtered_df) - nrow(filtered_df))
print(nrow(df) - nrow(filtered_df))
View(df)
print(loaded_ids[0])
head(loaded_ids,1)
library(tidyverse)
library(dplyr)
library(DBI)
library(duckdb)
library(arrow)
library(sf) ## for geom
con <- dbConnect(duckdb::duckdb(), dbdir = "C:/Users/manat/Documents/Projects/mtlBiodiversity/data/db/mtlbio.duckdb", read_only = TRUE)
library(tidyverse)
library(dplyr)
library(DBI)
library(duckdb)
library(arrow)
library(sf) ## for geom
con <- dbConnect(duckdb::duckdb(), dbdir = "C:/Users/manat/Documents/Projects/mtlBiodiversity/data/db/mtlbio.duckdb", read_only = TRUE)
library(tidyverse)
library(dplyr)
library(DBI)
library(duckdb)
library(arrow)
library(sf) ## for geom
con <- dbConnect(duckdb::duckdb(), dbdir = "C:/Users/manat/Documents/Projects/mtlBiodiversity/data/db/mtlbio.duckdb", read_only = TRUE)
dbListTables(con)
df <- dbReadTable(con, "grid_sjoin")   # read into R
#Remove ids from user sampling bias filter
loaded_ids <- readRDS("R/ids_samplingBias.rds")
head(loaded_ids,1)
print(length(loaded_ids))
filtered_df <- df[!df$gbifID %in% loaded_ids, ]
print(nrow(df) - nrow(filtered_df))
print(paste(nrow(df) - nrow(filtered_df)), 'Removed')
print(nrow(df) - nrow(filtered_df))
print('Removed')
library(tidyverse)
library(dplyr)
library(DBI)
library(duckdb)
library(arrow)
library(sf) ## for geom
con <- dbConnect(duckdb::duckdb(), dbdir = "C:/Users/manat/Documents/Projects/mtlBiodiversity/data/db/mtlbio.duckdb", read_only = TRUE)
dbListTables(con)
df <- dbReadTable(con, "grid_sjoin")   # read into R
#Remove ids from user sampling bias filter
loaded_ids <- readRDS("R/ids_samplingBias.rds")
head(loaded_ids,1)
print(length(loaded_ids))
filtered_df <- df[!df$gbifID %in% loaded_ids, ]
print(nrow(df) - nrow(filtered_df))
print('Removed')
library(tidyverse)
library(dplyr)
library(DBI)
library(duckdb)
library(arrow)
library(sf) ## for geom
con <- dbConnect(duckdb::duckdb(), dbdir = "C:/Users/manat/Documents/Projects/mtlBiodiversity/data/db/mtlbio.duckdb", read_only = TRUE)
dbListTables(con)
df <- dbReadTable(con, "grid_sjoin")   # read into R
#Remove ids from user sampling bias filter
loaded_ids <- readRDS("R/ids_samplingBias.rds")
head(loaded_ids,1)
print(length(loaded_ids))
filtered_df <- df[!df$gbifID %in% loaded_ids, ]
print(nrow(df) - nrow(filtered_df))
print('Removed')
filtered_df <- filtered_df %>%
filter(!is.na(grid_id))
library(tidyverse)
library(dplyr)
library(DBI)
library(duckdb)
library(arrow)
library(sf) ## for geom
con <- dbConnect(duckdb::duckdb(), dbdir = "C:/Users/manat/Documents/Projects/mtlBiodiversity/data/db/mtlbio.duckdb", read_only = TRUE)
dbListTables(con)
df <- dbReadTable(con, "grid_sjoin")   # read into R
#Remove ids from user sampling bias filter
loaded_ids <- readRDS("R/ids_samplingBias.rds")
head(loaded_ids,1)
print(length(loaded_ids))
filtered_df <- df[!df$gbifID %in% loaded_ids, ]
print(nrow(df) - nrow(filtered_df))
print('Removed')
filtered_df <- filtered_df %>%
filter(!is.na(grid_id))
#Shannon index helper function
shannon <- function(x) {
freq <- table(x)          #count of each species
p <- freq / sum(freq)     # proportions
-sum(p*log(p))            # H
}
simpson <- function(x) {
freq <- table(x)
p <- freq / sum(freq)
1 - sum(p^2)                    # Simpson diversity
}
df_eco <- filtered_df %>%
group_by(grid_id) %>%
summarise(
observations = n(),
species_richness = n_distinct(species),
shannon_index = shannon(species),
simpson_index = simpson(species),
genus_richness = n_distinct(genus),
family_richness = n_distinct(family),
order_richness = n_distinct(order),
class_richness = n_distinct(class),
phylum_richness = n_distinct(phylum)
)
view(df_eco)
write_parquet(df_eco, "data/processed/grid.parquet")
Remove ids from user sampling bias filter
#Remove ids from user sampling bias filter
loaded_ids <- readRDS("R/ids_samplingBias.rds")
print(length(loaded_ids))
filtered_df <- df[!df$gbifID %in% loaded_ids, ]
print(nrow(df) - nrow(filtered_df))
print('Removed')
#Remove ids from user sampling bias filter
loaded_ids <- readRDS("R/ids_samplingBias.rds")
loaded_ids <- as.numeric(loaded_ids)
#Remove ids from user sampling bias filter
loaded_ids <- readRDS("R/ids_samplingBias.rds")
loaded_ids <- as.numeric(loaded_ids)
View(loaded_ids)
id_vector = df$gbifID
View(id_vector)
#Remove ids from user sampling bias filter
loaded_ids <- readRDS("R/ids_samplingBias.rds")
loaded_ids <- as.numeric(loaded_ids)
View(loaded_ids)
common <- intersect(id_vector,loaded_ids)
view(common)
common <- intersect(id_vector,loaded_ids)
length(common)
library(dbscan)
library(geosphere)  # for distance matrix
library(dplyr)
library(tidyr)
library(vegan)
library(ggplot2)
library(duckdb)
library(arrow)
library(sf)
library(DBI)
con <- dbConnect(duckdb::duckdb(), dbdir = "C:/Users/manat/Documents/Projects/mtlBiodiversity/data/db/mtlbio.duckdb", read_only = TRUE)
dbListTables(con)
df <- dbReadTable(con, "gbif_raw")   # read into R
id_vector = df$gbifID
View(id_vector)
#Remove ids from user sampling bias filter
loaded_ids <- readRDS("R/ids_samplingBias.rds")
loaded_ids <- as.numeric(loaded_ids)
View(loaded_ids)
print(length(loaded_ids))
common <- intersect(id_vector,loaded_ids)
length(common)
library(dbscan)
library(geosphere)  # for distance matrix
library(dplyr)
library(tidyr)
library(vegan)
library(ggplot2)
library(duckdb)
library(arrow)
library(sf)
library(DBI)
con <- dbConnect(duckdb::duckdb(), dbdir = "C:/Users/manat/Documents/Projects/mtlBiodiversity/data/db/mtlbio.duckdb", read_only = TRUE)
dbListTables(con)
df <- dbReadTable(con, "filtered_gbif")   # read into R
id_vector = df$gbifID
View(id_vector)
#Remove ids from user sampling bias filter
loaded_ids <- readRDS("R/ids_samplingBias.rds")
loaded_ids <- as.numeric(loaded_ids)
View(loaded_ids)
print(length(loaded_ids))
common <- intersect(id_vector,loaded_ids)
length(common)
